<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>dhome</title>
    <link rel="stylesheet" href="/dhome.css">

    <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css"
    integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg=="
    crossorigin="anonymous"
    referrerpolicy="no-referrer"
  />
  <link href="https://cdn.jsdelivr.net/npm/remixicon@4.5.0/fonts/remixicon.css" rel="stylesheet" />
    <link rel="stylesheet" href="dhome.css">
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>

</head>
<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();</script>

<body>
   
    
    
    <header class="header">
        <div class="logo">YOUR LOGO</div><span class="roomid"></span>
        <nav class="navbar">
          <ul>
            <li><a href="#">Home</a></li>
            <li><a href="/doctor/dhome/history">History</a></li>
            <li><a href="/doctor/dhome/reviews">Reviews</a></li>
            <!-- <li><box-icon class="icon" name='user-circle'></box-icon></li> -->
            <li><a href="/doctor/dhome/profile"><i class='bx bx-user-circle'></i></a></i>
        </nav>
        <div class="newheader">
            <div class="nav">
              <div class="logoimg">YOUR LOGO</div>
              <div id="menubtn">
                <i class="ri-menu-line"></i>
              </div>
            </div>
            <div class="menu">
              <i class="ri-close-line"></i>
              <h3><a href="#">Home</a></h3>
              <h3><a href="/doctor/dhome/history">History</a></h3>
              <h3><a href="/doctor/dhome/reviews">Reviews</a></h3>
              <h3><a href="/doctor/dhome/profile">Profile</a></h3>
            </div>
          </div>
      </header>


    
        <!-- <% if (data && data.length > 0) { %>
            <% data.forEach(patientdetails => { %>
              <p>
                <span class="name"><%= patientdetails.pname %></span>
                <em class="pid"><%= patientdetails.psocketid %></em>
                <button class="Accept" onclick="accept(this)">Accept</button>
                <button class="Reject" onclick="reject(this)">Reject</button>
              </p>
            <% }) %>
          <% } else { %>
            <p>You have no pending requests.
Check back later forÂ updates.</p>
          <% } %>
           -->
           <div class="container">
            <div class="pending-requests patientlist">
                <h2>Patients</h2>
        
                <% if (data && data.length > 0) { %>
                    <% data.forEach(patientdetails => { %>
                        <div class="request">
                            <div class="profile-pic">
                                <i class="fas fa-user"></i>
                            </div>
                            <div class="request-info">
                                <h3 class="name"><%= patientdetails.pname %></h3>
                                <p><span class="bbold"><em class="pid"><%= patientdetails.psocketid %></em>Description:</span> <span class="condn"><%=patientdetails.pcondition %></span></p>
                            </div>
                            <div class="actions">
                                <button class="accept" onclick="accept(this)">Accept</button>
                                <button class="reject" onclick="reject(this)">Reject</button>
                            </div>
                        </div>
                    <% }) %>
                <% } else { %>
                    <p class="nothingcame">You have no pending requests. Check back later for updates.</p>
                <% } %>
            </div>
        </div>
        
    
      

<!-- 
      <div class="request">
        <div class="profile-pic">
            <i class="fas fa-user"></i>
        </div>
        <div class="request-info">
            <h3>Patient - 1</h3>
            <p><span class="bbold">Description:</span> Dedicated psychiatrist specializing in mental health diagnosis, treatment, and well-being.</p>
        </div>
        <div class="actions">
            <button class="accept">Accept</button>
            <button class="reject">Reject</button>
        </div>
    </div> -->

        



    </div>
</body>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js"
integrity="sha512-7eHRwcbYkK4d9g/6tD/mhkf++eoTHwpNM9woBxtPUBWm67zeAfFC+HrdoE2GanKeocly/VxeLvIqwvCdk7qScg=="
crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"></script>
<script src="/dhome.js"></script>
<script>

    let doctordetails=null;

    async function decode() {
        try {
            const response = await fetch('/doctor/getemail', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${document.cookie.split('=')[1]}`,
                    'who':'doctor'
                },
                credentials: 'include'
            })
            const msg = await response.json()
            console.log(msg.details)
            doctordetails=msg.details
            
            socket.emit('register',{name:"doctor",email:doctordetails.email})
            return doctordetails;

        } catch (error) {
            console.log(error)

        }
    }

    decode()
    //fetch email using accesstoken
    

    


    const ele = document.getElementsByClassName('patientlist')[0]
    const children=ele.getElementsByClassName('request')

    
socket.on('patient', (patientdetails) => {
    console.log(patientdetails);

    // Get the parent element where patients are listed
   
    // Check if "No pending requests" message exists
    const noRequestsMessage = ele.querySelector('p');
    if (noRequestsMessage && noRequestsMessage.textContent === "You have no pending requests. Check back later for updates.") {
        noRequestsMessage.remove();  // Remove the "No pending requests" message if there are patients now
    }

    // Check if the patient already exists in the list
    let patientExists = false;
    for (let i = 0; i < children.length; i++) {
        if (children[i].getElementsByTagName('span')[0].textContent === patientdetails.pname) {
            patientExists = true;
            children[i].remove(); // Remove the existing entry for this patient (if any)
            break;  // Exit loop once found and removed
        }
    }

    // Only add the patient if they are not already in the list
    if (!patientExists) {
        const para = document.createElement('div');
        para.className="request"
        para.innerHTML = `
        <div class="profile-pic">
                      <i class="fas fa-user"></i>
                    </div>
                    <div class="request-info">
                      <h3 class="name"> ${patientdetails.pname}</h3>
                      <p><span class="bbold"><em class="pid">${patientdetails.pid}</em>Description:</span> <span class="condn">${patientdetails.condition}</span></p>
                    </div>
                    <div class="actions">
                      <button class="accept" onclick="accept(this)">Accept</button>
                      <button class="reject" onclick="reject(this)">Reject</button>
                    </div>
          
        `;
        ele.appendChild(para);  // Append the new patient to the list
    }
});




    async function pendingrequests(data,docname,patientcondn){



        const response=await fetch('/doctor/pendingrequests',{
            method:'POST',
            headers: {
    'Content-Type': 'application/json' // or other content types
    // Add other headers if necessary
  },
            body:JSON.stringify({
                "data":data,
                "docname":docname,
                "patientcondn":patientcondn
            })
        })
        const msg=await response.json()
        console.log(msg)
        return msg.message;
    }

    async function lookdb(pid){
console.log(pid)
      const response=await fetch('/doctor/lookdb',{
        method:'GET',
        headers:{
          "pid":pid
        }
      })

      const reply=await response.json()
      return reply.message
    }

var p_name;

    async function accept(a) {

      console.log("accepted")
      let pid=a.parentElement.parentElement.getElementsByTagName('em')[0].textContent
      

      

      p_name=a.parentElement.parentElement.querySelector('.name').textContent
        const btn = a.parentElement.getElementsByTagName('button')

        if(btn[0].textContent==="Accept")


        {



        const res=await lookdb(pid)
      .then((result)=>{
        console.log(result)
      })
      .catch((error)=>{
        console.log(error)
      })
        
      
        btn[1].style.display = "none"
        btn[0].textContent = "Creating Room..."
        //fetch roomid from the db for that doctor        
        const response=await decode()
        var roomid=response.roomid
        var usy=response.Username
        console.log(usy,".....................................................")

        console.log(roomid)
        socket.emit('room', {
            roomid: roomid,
            pid: pid,
            docname:usy
        }, (response) => {

            btn[0].textContent="Join"
            btn[0].style.backgroundColor="green"
            document.getElementsByClassName('roomid')[0].textContent=roomid
           

        })
    }
    else{
        const roomid=document.getElementsByClassName('roomid')[0].textContent
        const pending = Array.from(a.parentElement.parentElement.parentElement.getElementsByClassName('request')).filter(p => p !== a.parentElement.parentElement);  // Exclude the clicked <p> element
        let data=[]
for(let i=0;i<pending.length;i++){
data.push({
    pname:pending[i].getElementsByClassName('name')[0].textContent,
    psocketid:pending[i].getElementsByClassName('pid')[0].textContent,
    pcondition:pending[i].getElementsByClassName('condn')[0].textContent
})
}

        console.log(data)
        const res=await decode()
        console.log("before sending .....")
        console.log(res.Username)
       const response= await pendingrequests(data,res.Username)
    //    note here......

    
    .then(async(response)=>{
        const pcondition=a.parentElement.parentElement.querySelector('.condn').textContent
        const response2=await fetch('/doctor/history',{
            method:'POST',
            headers: {
    'Content-Type': 'application/json' // or other content types
    // Add other headers if necessary
  },
            body:JSON.stringify({
                "pname":p_name,
                "condition":pcondition  //patient conditon should come from ejs
            })
        })
        const msg2=await response2.json()
        console.log(msg2)
        window.location.href=`/room/${roomid}`})
       .catch(error=>{
            console.log(error)
        })
    }
    }

    async function reject(r) {
        const pid = r.parentElement.parentElement.getElementsByClassName('pid')[0].textContent
        console.log("inside rejection",pid)
        
      const res=await lookdb(pid)
      .then((result)=>{
        console.log(result)
      })
      .catch((error)=>{
        console.log(error)
      })
            decode().then(()=>{socket.emit('reject', {
            pid: pid,
            docname: doctordetails.Username
        })})
        r.parentElement.parentElement.remove()

        
    }


    
</script>
<script src="/stopreload.js"></script>
<script src="/sendalert.js"></script>
</html>